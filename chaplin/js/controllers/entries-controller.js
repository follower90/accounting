// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'controllers/base/controller', 'models/entries', 'models/entry', 'models/types', 'views/entry-view', 'views/entryedit-view', 'views/newentry-view', 'views/entries-view'], function(Chaplin, Controller, Entries, Entry, Types, EntryView, EntryEditView, NewEntryView, EntriesView) {
  'use strict';
  var EntriesController;
  return EntriesController = (function(_super) {
    __extends(EntriesController, _super);

    function EntriesController() {
      return EntriesController.__super__.constructor.apply(this, arguments);
    }

    EntriesController.prototype.home = function() {
      this.collection = new Entries();
      return this.collection.fetch({
        type: 'post',
        data: {
          user_id: Chaplin.mediator.user.id
        },
        success: (function(_this) {
          return function() {
            $('#main-container').html('');
            return _this.view = new EntriesView({
              collection: _this.collection,
              region: 'main'
            });
          };
        })(this),
        error: (function(_this) {
          return function() {
            return $('#main-container').html('Server Error');
          };
        })(this)
      });
    };

    EntriesController.prototype.month = function(params) {
      var date;
      date = params.date.split('-');
      this.month = date[0];
      this.year = date[1];
      this.collection = new Entries();
      return this.collection.fetch({
        data: {
          month: this.month,
          year: this.year,
          user_id: Chaplin.mediator.user.id
        },
        success: (function(_this) {
          return function() {
            $('#main-container').html('');
            return _this.view = new EntriesView({
              collection: _this.collection,
              region: 'main'
            });
          };
        })(this),
        error: (function(_this) {
          return function() {
            return $('#main-container').html('Server Error');
          };
        })(this)
      });
    };

    EntriesController.prototype["new"] = function() {
      var that;
      this.entry = new Entry();
      that = this;
      this.types = new Types();
      return this.types.fetch({
        type: 'post',
        data: {
          user_id: Chaplin.mediator.user.id
        },
        success: (function(_this) {
          return function() {
            that.entry.attributes.types = _this.types.toJSON();
            return _this.view = new NewEntryView({
              model: that.entry,
              region: 'main'
            });
          };
        })(this)
      });
    };

    EntriesController.prototype.edit = function(params) {
      var that;
      this.entry = new Entry();
      that = this;
      return this.entry.fetch({
        type: 'post',
        data: {
          id: params.id,
          user_id: Chaplin.mediator.user.id
        },
        success: (function(_this) {
          return function() {
            $('#main-container').html('');
            _this.types = new Types();
            return _this.types.fetch({
              type: 'post',
              data: {
                user_id: Chaplin.mediator.user.id
              },
              success: function() {
                that.entry.attributes.types = _this.types.toJSON();
                return _this.view = new EntryEditView({
                  model: that.entry,
                  region: 'main'
                });
              }
            });
          };
        })(this),
        error: (function(_this) {
          return function() {
            return $('#main-container').html('Server Error');
          };
        })(this)
      });
    };

    EntriesController.prototype["delete"] = function(params) {
      this._id = params.id;
      if (confirm('Are you sure deleting id #' + this._id + '?')) {
        this.entry = new Entry({
          id: this._id
        });
        this.entry.destroy({
          dataType: 'text',
          success: (function(_this) {
            return function() {
              console.log('Delete success');
              return $('.entry-' + _this._id).remove();
            };
          })(this),
          error: (function(_this) {
            return function() {
              return console.log('Delete error occured');
            };
          })(this)
        });
      }
      return this.redirectTo('entries#home');
    };

    return EntriesController;

  })(Controller);
});
